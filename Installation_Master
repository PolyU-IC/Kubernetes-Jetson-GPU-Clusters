@@@ Kubernetes Jetson GPU Clusters Installation Guide
@@@ Vincent Chan

In Master node (Nvidia Jetson Xavier)

1) Install Jetpack 4.2.2 without tensorflow in SDK Manager

2) Install tensorflow 1.14.0 of nvidia-19.07
   $ sudo apt-get update && sudo apt-get upgrade
   $ sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran
   $ sudo apt-get install python3-pip
   $ sudo pip3 install -U pip testresources setuptools
   $ sudo pip3 install -U numpy==1.16.1 future==0.17.1 mock==3.0.5 h5py==2.9.0 keras_preprocessing==1.0.5 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11
   $ sudo pip3 install --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v42 tensorflow-gpu==1.14.0+nv19.7

3) Resources monitoring (optional)
  $ sudo -H pip install -U jetson-stats
  $ sudo jtop
   

4) In order to save resources, turn off the GUI mode
   $ sudo systemctl set-default multi-user.target
   ** Change 'multi-user.target' to 'graphical.target' can back to GUI mode

5) Set to the highest power mode: MODE 30W ALL
   $ sudo nvpmodel -m 3

6) Disable swap since it may cause issue with Kubernetes
   $ sudo swapoff -a

7) Edit /etc/docker/daemon.json
{
	"default-runtime": "nvidia",
	"runtimes": {
	"nvidia": {
	"path": "nvidia-container-runtime",
	"runtimeArgs":[]
		}
	}

}

8) Refresh system
   $ sudo apt-get update
   $ sudo apt-get dist-upgrade

9) Add current user to docker group
   $ sudo groupadd docker
   $ sudo usermod -aG docker ianvidia
   $ newgrp docker
   $ sudo reboot

10) Test Docker GPU support
   $ sudo docker run -it jitteam/devicequery ./deviceQuery
   ** It should display PASS if all setup are done correctly

11) Install curl
   $ sudo apt install curl

12) Install kubernetes
   $ sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
   $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
   $ echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
   $ sudo apt-get update
   $ sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni

13) Configure master node
   $ sudo kubeadm init --pod-network-cidr=10.244.10.0/16 --kubernetes-version 1.18.2

   **If there is an issue and you want to reset the cluster
   $ sudo kubeadm reset

14) Follow the instructions in the terminal and continue
   $ mkdir -p $HOME/.kube
   $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   $ sudo chown $(id -u):$(id -g) $HOME/.kube/config

15) Apply flannel
   $ sysctl net.bridge.bridge-nf-call-iptables=1
   $ curl -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
   $ sudo kubectl apply -f kube-flannel.yml

15) List out all the nodes
   $ sudo kubectl get nodes
   **Master should be in "READY"

   If this returns an error message like: “The connection to the server localhost:8080 was refused — did you specify the right host or port?”,
   $ sudo cp /etc/kubernetes/admin.conf $HOME/
   $ sudo chown $(id -u):$(id -g) $HOME/admin.conf
   $ export KUBECONFIG=$HOME/admin.conf

16) Change slave label from <none> to worker
    Assume "jetson-tx2-004" is the work name
   $ sudo kubectl label node jetson-tx2-004 node-role.kubernetes.io/worker=worker

17) Check if it works
   $ sudo kubectl apply -f gpu-clusters-test.yml
   $ kubectl logs devicequery

   **.yml is inside YMAL-Config/pod

   ** If "ContainerCreating", check the pod
   $ sudo kubectl get pods --all-namespaces
   $ sudo kubectl describe pods

   ** If the problem is "no such files -> /run/flannel/subnet.env", copy from master to all any works missings

   **If everything goes well, you will see "PASS" again.

18) Apply ymal and execute
  $ sudo kubectl apply -f gpu-cluster-tf.yaml
  $ sudo kubectl exec -it tf -- /bin/bash




